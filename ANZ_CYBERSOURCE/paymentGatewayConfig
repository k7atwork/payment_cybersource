/*--------------------[ ANU Customisations ]--------------------
INC0394481, K7, 2021-09-09
 - Initial Build
---------------------------------------------------------------*/
import ANU_ANZ_CYBERSOURCE:Utils;

class paymentGatewayConfig
   method paymentGatewayConfig();
   
   property string access_key;
   property string profile_id;
   property string secret_key;
   
   property string merchant_id;
   
   property string key_id;
   property string secret_key_base64;
   
   method getParameterValue(&inParamName As string) Returns string;
   
private
   
   instance array of array of string &connectorProp;
   
   method executeValidation();
   
end-class;

method paymentGatewayConfig
   
   Local Record &recConfig = (create ANU_ANZ_CYBERSOURCE:Utils()).getPaymentConfigRecord();
   
   /*--[ Fetch Details from Node Properties]--*/
   Local array of array of string &keyValPairs = CreateArrayRept(CreateArrayRept("", 0), 0);
   
   REM Local SQL &sql = CreateSQL("SELECT PROPNAME, COMMENTS FROM PSNODEPROP WHERE MSGNODENAME = :1", Node.ANU_ANZ_PYMNT_GATEWAY);
   Local SQL &sql = CreateSQL("SELECT PROPNAME, COMMENTS FROM PSNODEPROP WHERE MSGNODENAME = :1", &recConfig.IB_MSGNODENAME.Value);
   
   Local string &propName, &propValue;
   
   While &sql.Fetch(&propName, &propValue)
      &keyValPairs.Push(CreateArray(&propName, &propValue));
   End-While;
   
   Local number &i;
   
   For &i = 1 To &keyValPairs.Len
      Evaluate &keyValPairs [&i][1]
      When = "access_key"
         &access_key = &keyValPairs [&i][2];
         Break;
      When = "profile_id"
         &profile_id = &keyValPairs [&i][2];
         Break;
      When = "secret_key"
         &secret_key = &keyValPairs [&i][2];
         Break;
      When = "key_id"
         &key_id = &keyValPairs [&i][2];
         Break;
      When = "secret_key_base64"
         &secret_key_base64 = &keyValPairs [&i][2];
         Break;
      When = "merchant_id"
         &merchant_id = &keyValPairs [&i][2];
         Break;
      End-Evaluate;
   End-For;
   
   /*--[ Fetch Details from Connector Properties]--*/
   %This.connectorProp = CreateArrayRept(CreateArrayRept("", 0), 0);
   
   Local Message &requestMsg = CreateMessage(Operation.IB_GENERIC);
   &requestMsg.IBInfo.IBConnectorInfo.ConnectorName = "ESHTTPTARGET";
   Local boolean &BRtn = &requestMsg.IBInfo.LoadConnectorPropFromNode(&recConfig.IB_MSGNODENAME.Value);
   
   Local number &count = &requestMsg.IBInfo.IBConnectorInfo.GetNumberOfConnectorProperties();
   
   For &i = 1 To &count
      %This.connectorProp.Push(CreateArray(&requestMsg.IBInfo.IBConnectorInfo.GetConnectorPropertiesName(&i), &requestMsg.IBInfo.IBConnectorInfo.GetConnectorPropertiesValue(&i)));
   End-For;
   
   %This.executeValidation();
   
end-method;


method getParameterValue
   /+ &inParamName as String +/
   /+ Returns String +/
   
   Local number &pos = %This.connectorProp.Find(&inParamName);
   
   If &pos > 0 Then
      Return %This.connectorProp [&pos][2];
   End-If;
   
   Return "";
   
end-method;


method executeValidation
   
   Local boolean &isTestPaymentInstance = (Find("test", %This.getParameterValue("URL")) > 0);
   
   If (create ANU_ANZ_CYBERSOURCE:Utils()).isEnvProduction Then
      If &isTestPaymentInstance Then
         Error "Payment Gateway Configuration in pointing to test payment instance. Please update.";
      End-If;
   Else
      If Not &isTestPaymentInstance Then
         Error "Payment Gateway Configuration in pointing to live payment instance. Please update.";
      End-If;
   End-If;
   
end-method;
